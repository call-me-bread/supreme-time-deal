"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deposit = exports.webhook = void 0;
var PlainFetcher_1 = require("@nestia/fetcher/lib/PlainFetcher");
/**
 * 웹훅 이벤트 더미 리스너.
 *
 * `internal.webhook` 은 실제 토스 페이먼츠의 결제 서버에는 존재하지 않는 API 로써,
 * `fake-toss-payments-server` 의 {@link Configuration.WEBHOOK_URL } 에 아무런 URL 을
 * 설정하지 않으면, `fake-toss-payments-server` 로부터 발생하는 모든 종류의 웹훅
 * 이벤트는 이 곳으로 전달되어 무의미하게 사라진다.
 *
 * 따라서 `fake-toss-payments-server` 를 사용하여 토스 페이먼츠 서버와의 연동을 미리
 * 검증코자 할 때는, 반드시 {@link Configuration.WEBHOOK_URL } 를 설정하여 웹훅
 * 이벤트가 귀하의 백엔드 서버로 제대로 전달되도록 하자.
 *
 * @param input 웹훅 이벤트 정보
 * @author Samchon
 *
 * @controller FakeTossInternalController.
 * @path POST /internal/webhook
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function webhook(connection, input) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(__assign(__assign({}, connection), { headers: __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) }), __assign(__assign({}, webhook.METADATA), { path: webhook.path() }), input)];
        });
    });
}
exports.webhook = webhook;
(function (webhook) {
    webhook.METADATA = {
        method: "POST",
        path: "/internal/webhook",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    webhook.path = function () { return "/internal/webhook"; };
})(webhook || (exports.webhook = webhook = {}));
/**
 * 가상 계좌에 입금하기.
 *
 * `internal.virtual_accounts.deposit` 은 실제 토스 페이먼츠의 결제 서버에는 존재하지
 * 않는 API 로써, 가상 계좌 결제를 신청한 고객이, 이후 가상 계좌에 목표 금액을 입금하는
 * 상황을 시뮬레이션할 수 있는 함수이다.
 *
 * 즉 `internal.virtual_accounts.deposit` 는 고객이 스스로에게 가상으로 발급된 계좌에
 * 입금을 하고, 그에 따라 토스 페이먼츠 서버에서 webhook 이벤트가 발생하여 이를 귀하의
 * 백엔드 서버로 전송하는 일련의 상황을 테스트하기 위한 함수인 셈이다.
 *
 * @param paymentKey 대상 가상 계좌 결제 정보의 {@link ITossPayment.paymentKey}
 * @returns 입금 완료된 가상 꼐좌 결제 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossInternalController.
 * @path PUT /internal/:paymentKey/deposit
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function deposit(connection, paymentKey) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(connection, __assign(__assign({}, deposit.METADATA), { path: deposit.path(paymentKey) }))];
        });
    });
}
exports.deposit = deposit;
(function (deposit) {
    deposit.METADATA = {
        method: "PUT",
        path: "/internal/:paymentKey/deposit",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    deposit.path = function (paymentKey) {
        return "/internal/".concat(encodeURIComponent(paymentKey !== null && paymentKey !== void 0 ? paymentKey : "null"), "/deposit");
    };
})(deposit || (exports.deposit = deposit = {}));
//# sourceMappingURL=index.js.map