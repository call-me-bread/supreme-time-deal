"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancel = exports.approve = exports.key_in = exports.at = void 0;
var PlainFetcher_1 = require("@nestia/fetcher/lib/PlainFetcher");
/**
 * 결제 정보 조회하기.
 *
 * `payments.at` 은 결제 정보를 조회하는 함수이다.
 *
 * 주로 클라이언트 어플리케이션이 토스 페이먼츠가 자체적으로 제공하는 결제 창을 사용하는
 * 경우, 그래서 프론트 어플리케이션이 귀하의 백엔드 서버에 `paymentKey` 등 극히 일부의
 * 식별자 정보만을 전달해주어, 상세 결제 정보가 필요할 때 사용한다.
 *
 * 참고로 토스 페이먼츠는 다른 결제 PG 사들과 다르게, 클라이언트 어플리케이션에서 토스
 * 페이먼츠의 결제 창을 이용하여 진행한 결제가 바로 확정되는 것은 아니다. 귀사의 백엔드
 * 서버가 현재의 `payments.at` 을 통하여 해당 결제 정보를 확인하고, {@link approve } 를
 * 호출하여 직접 승인하기 전까지, 해당 결제는 확정되지 않으니, 이 점에 유의하기 바란다.
 *
 * @param paymentKey 결제 정보의 {@link ITossPayment.paymentKey}
 * @returns 결제 정보
 * @author Samchon
 *
 * @controller FakeTossPaymentsController.
 * @path GET /v1/payments/:paymentKey
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function at(connection, paymentKey) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(connection, __assign(__assign({}, at.METADATA), { path: at.path(paymentKey) }))];
        });
    });
}
exports.at = at;
(function (at) {
    at.METADATA = {
        method: "GET",
        path: "/v1/payments/:paymentKey",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    at.path = function (paymentKey) {
        return "/v1/payments/".concat(encodeURIComponent(paymentKey !== null && paymentKey !== void 0 ? paymentKey : "null"));
    };
})(at || (exports.at = at = {}));
/**
 * 카드로 결제하기.
 *
 * `payments.key_in` 은 카드를 이용한 결제를 할 때 호출되는 API 함수이다.
 *
 * 참고로 `payments.key_in` 는 클라이언트 어플리케이션이 토스 페이먼츠가 자체적으로
 * 제공하는 결제 창을 사용하는 경우, 귀하의 백엔드 서버가 이를 실 서비스에서 호출하는
 * 일은 없을 것이다. 다만, 고객이 카드를 통하여 결제하는 상황을 시뮬레이션하기 위하여,
 * 테스트 자동화 프로그램 수준에서 사용될 수는 있다.
 *
 * 그리고 귀하의 백엔드 서버가 `payments.key-in` 을 직접 호출하는 경우, 토스 페이먼츠
 * 서버는 이를 완전히 승인된 결제로 보고 바로 확정한다. 때문에 `payments.key-in` 을
 * 직접 호출하는 경우, 토스 페이먼츠의 결제 창을 이용하여 별도의 {@link approve } 가
 * 필요한 때 대비, 훨씬 더 세심한 주의가 요구된다.
 *
 * 더하여 만약 귀하의 백엔드 서버가 `fake-toss-payments-server` 를 이용하여 고객의
 * 카드 결제를 시뮬레이션하는 경우, {@link ITossCardPayment.ICreate.__approved } 값을
 * `false` 로 하여 카드 결제의 확정을 고의로 회피할 수 있다. 이를 통하여 토스
 * 페이먼츠의 결제 창을 이용한 카드 결제의 경우, 별도의 {@link approve } 가 필요한
 * 상황을 시뮬레이션 할 수 있다.
 *
 * @param input 카드 결제 입력 정보
 * @returns 카드 결제 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossPaymentsController.
 * @path POST /v1/payments/key-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function key_in(connection, input) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(__assign(__assign({}, connection), { headers: __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) }), __assign(__assign({}, key_in.METADATA), { path: key_in.path() }), input)];
        });
    });
}
exports.key_in = key_in;
(function (key_in) {
    key_in.METADATA = {
        method: "POST",
        path: "/v1/payments/key-in",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    key_in.path = function () { return "/v1/payments/key-in"; };
})(key_in || (exports.key_in = key_in = {}));
/**
 * 결제 승인하기.
 *
 * 토스 페이먼츠는 귀사의 백엔드에서 일어난 결제가 아닌 프론트 어플리케이션의 결제 창에서
 * 이루어진 결제의 경우, 해당 서비스으 백엔드 서버로부터 결제를 승인받기 전까지, 이를
 * 확정하지 않는다. `payments.approve` 는 바로 이러한 상황에서, 해당 결제를 승인해주는
 * 함수이다.
 *
 * 만일 귀하가 `fake-toss-payments-server` 를 이용하여 결제를 시뮬레이션하는 경우라면,
 * 결제 관련 API 를 호출함에 있어 {@link ITossCardPayment.ICreate.__approved } 내지
 * {@link ITossVirtualAccountPayment.ICreate.__approved } 를 `false` 로 함으로써, 별도
 * 승인이 필요한 이러한 상황을 시뮬레이션 할 수 있다.
 *
 * @param paymentKey 대상 결제의 {@link ITossPayment.paymentKey}
 * @param input 주문 정보 확인
 * @returns 승인된 결제 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossPaymentsController.
 * @path POST /v1/payments/:paymentKey
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function approve(connection, paymentKey, input) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(__assign(__assign({}, connection), { headers: __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) }), __assign(__assign({}, approve.METADATA), { path: approve.path(paymentKey) }), input)];
        });
    });
}
exports.approve = approve;
(function (approve) {
    approve.METADATA = {
        method: "POST",
        path: "/v1/payments/:paymentKey",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    approve.path = function (paymentKey) {
        return "/v1/payments/".concat(encodeURIComponent(paymentKey !== null && paymentKey !== void 0 ? paymentKey : "null"));
    };
})(approve || (exports.approve = approve = {}));
/**
 * 결제 취소하기.
 *
 * `payments.cancel` 은 결제를 취소하는 API 이다.
 *
 * 결제 취소 입력 정보 {@link ITossPaymentCancel.ICreate } 에는 취소 사유를 비롯하여,
 * 고객에게 환불해 줄 금액과 부가세 및 필요시 환불 계좌 정보 등을 입력하게 되어있다.
 *
 * @param paymentKey 결제 정보의 {@link ITossPayment.paymentKey}
 * @param input 취소 입력 정보
 * @returns 취소된 결제 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossPaymentsController.
 * @path POST /v1/payments/:paymentKey/cancel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function cancel(connection, paymentKey, input) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, PlainFetcher_1.PlainFetcher.fetch(__assign(__assign({}, connection), { headers: __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) }), __assign(__assign({}, cancel.METADATA), { path: cancel.path(paymentKey) }), input)];
        });
    });
}
exports.cancel = cancel;
(function (cancel) {
    cancel.METADATA = {
        method: "POST",
        path: "/v1/payments/:paymentKey/cancel",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    cancel.path = function (paymentKey) {
        return "/v1/payments/".concat(encodeURIComponent(paymentKey !== null && paymentKey !== void 0 ? paymentKey : "null"), "/cancel");
    };
})(cancel || (exports.cancel = cancel = {}));
//# sourceMappingURL=index.js.map