/**
 * @packageDocumentation
 * @module api.functional.v1.cash_receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { ITossCashReceipt } from "../../../structures/ITossCashReceipt";
/**
 * 현금 영수증 발행하기.
 *
 * @param input 입력 정보
 * @returns 현금 영수증 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossCashReceiptsController.
 * @path POST /v1/cash-receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, input: ITossCashReceipt.ICreate): Promise<create.Output>;
export declare namespace create {
    type Input = ITossCashReceipt.ICreate;
    type Output = ITossCashReceipt;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/v1/cash-receipts";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: () => string;
}
/**
 * 현금 영수증 취소하기.
 *
 * @param receiptKey 현금 영수증의 {@link ITossCashReceipt.receiptKey}
 * @param input 취소 입력 정보
 * @returns 취소된 현금 영수증 정보
 * @security basic
 * @author Samchon
 *
 * @controller FakeTossCashReceiptsController.
 * @path POST /v1/cash-receipts/:receiptKey/cancel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function cancel(connection: IConnection, receiptKey: string, input: ITossCashReceipt.ICancel): Promise<cancel.Output>;
export declare namespace cancel {
    type Input = ITossCashReceipt.ICancel;
    type Output = ITossCashReceipt;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/v1/cash-receipts/:receiptKey/cancel";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: (receiptKey: string) => string;
}
